// Prisma schema generated from AutoTour.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------
// Core Models
// ----------------------
model User {
  id           String         @id @default(uuid())
  username     String         @unique
  email        String         @unique
  password     String
  role         String         @default("user")
  riotGameName String
  riotGameTag  String
  region       String
  createdAt    DateTime       @default(now())
  participants Participant[]
  balance      Balance?
  transactions Transaction[]
  createdTournamentTemplates TournamentTemplate[] @relation("UserCreatedTournamentTemplates")
  organizedTournaments Tournament[] @relation("UserOrganizedTournaments")
  matchResults MatchResult[]
}

model TournamentTemplate {
  id                   String       @id @default(uuid())
  name                 String
  roundsTotal          Int
  maxPlayers           Int
  entryFee             Float
  prizeStructure       Json
  hostFeePercent       Float        @default(0.1)
  expectedParticipants Int
  scheduleType         String
  startTime            String
  phases               Json?        @default("[]")
  createdBy            User         @relation("UserCreatedTournamentTemplates", fields: [createdById], references: [id])
  createdById          String
  createdAt            DateTime     @default(now())
  tournaments          Tournament[]
}

model Tournament {
  id                       String       @id @default(uuid())
  name                     String
  description              String?
  startTime                DateTime
  entryFee                 Float        @default(0)
  organizer                User         @relation("UserOrganizedTournaments", fields: [organizerId], references: [id])
  organizerId              String
  status                   String
  maxPlayers               Int
  roundsTotal              Int
  config                   Json?
  createdAt                DateTime     @default(now())
  template                 TournamentTemplate? @relation(fields: [templateId], references: [id])
  templateId               String?
  auto                     Boolean      @default(false)
  registrationDeadline     DateTime
  participants             Participant[]
  rounds                   Round[]
  rewards                  Reward[]
  prizeStructure           Json
  hostFeePercent           Float        @default(0.1)
  expectedParticipants     Int
  actualParticipantsCount  Int?
  adjustedPrizeStructure   Json?
}

model Participant {
  id              String    @id @default(uuid())
  tournament      Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId    String
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  joinedAt        DateTime  @default(now())
  scoreTotal      Float     @default(0)
  eliminated      Boolean   @default(false)
  checkmateActive Boolean   @default(false)
  paid            Boolean   @default(false)
  rewarded        Boolean   @default(false)
  rewards         Reward[]
}

model Reward {
  id            String       @id @default(uuid())
  participant   Participant  @relation(fields: [participantId], references: [id])
  participantId String
  tournament    Tournament   @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  amount        Float
  status        String
  sentAt        DateTime?
}

model Round {
  id           String       @id @default(uuid())
  tournament   Tournament   @relation(fields: [tournamentId], references: [id])
  tournamentId String
  roundNumber  Int
  startTime    DateTime
  endTime      DateTime?
  status       String
  config       Json?
  lobbies      Lobby[]
}

model Lobby {
  id            String      @id @default(uuid())
  round         Round       @relation(fields: [roundId], references: [id])
  roundId       String
  name          String
  participants  Json
  matchId       String?
  fetchedResult Boolean      @default(false)
  matches       Match[]
}

model Match {
  id            String      @id @default(uuid())
  matchIdRiotApi String @unique
  lobby         Lobby       @relation(fields: [lobbyId], references: [id])
  lobbyId       String
  fetchedAt     DateTime?
  matchData     Json?
  matchResults  MatchResult[]
}

model MatchResult {
  id        String   @id @default(uuid())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  placement Int
  points    Float

  @@unique([matchId, userId])
}

model Balance {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  amount    Float    @default(0)
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // deposit, withdraw, refund, entry_fee, reward
  amount    Float
  status    String   // pending, success, failed
  refId     String?
  createdAt DateTime @default(now())
} 